import logging
from aiogram import F, Router, types
from aiogram.filters import CommandStart, Command, StateFilter, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from kbds.reply import get_keyboard
from parser.pars_wb import PAGE_LIMIT, get_response
from parser.pars_geo import get_osm, get_xinfo
from utils.validate_vendor_code import validation_code


search_vendor_code_router = Router()

start_kbd = get_keyboard(
    '–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫',
    '–ù–∞—á–∞–ª–æ',
    placeholder='–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
    sizes=(1,),
)

position_kbd = get_keyboard(
    '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—éüåá',
    '–ü–µ—Ä–µ–¥–∞—Ç—åüó∫Ô∏è',
    '–í–≤–µ—Å—Ç–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ‚úèÔ∏è',
    placeholder='–ø–µ—Ä–µ–¥–∞–π—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã',
    request_location=1,
    sizes=(2, 1,),
)

@search_vendor_code_router.message(or_f(Command('search'), F.text.lower() == '–ø–æ–∏—Å–∫'))
async def start_cmd(message: types.Message):
    await message.answer(
        f'üò∫üòΩüò∫\n–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–æ–∑–∏—Ü–∏—é —Ç–æ–≤–æ–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –≤—ã–¥–∞—á–µ –í–ë –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É\n –ü—Ä–∏—Å—Ç—É–ø–∏–º?', 
        reply_markup=start_kbd,
    )    

#################FSM####################
    
class AddSearchQuery(StatesGroup):
    geo_position = State()
    vendor_code = State()
    search_query = State()

    texts = {
        'AddSearchQuery:geo_position': '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à—É –ª–æ–∫–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ',
        'AddSearchQuery:vendor_code': '–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∑–∞–Ω–æ–≤–æ',
        'AddSearchQuery:search_query': '–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ',
    }


#–û–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø—Ä–∏ –¥–∞–ª—å–Ω–µ–π—à–∏–º –ø–∞—Ä—Å–∏–Ω–≥–µ, –≤—Å—Ç–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö
@search_vendor_code_router.message(StateFilter(None), F.text.lower() == '–Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫')
async def start_quiz(message: types.Message, state: FSMContext):
    await message.answer(
        '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ú–æ—Å–∫–≤–∞)üåá\n–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –í–∞—à—É?üó∫Ô∏è\n–õ–∏–±–æ –í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –ª—é–±–æ–π –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å –∞–¥—Ä–µ—Å‚úèÔ∏è\n\
        –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥ - –æ—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–∞–¥ \n\
        –î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞ - –æ—Ç–º–µ–Ω–∞', 
        reply_markup=position_kbd,
    )
    await state.set_state(AddSearchQuery.geo_position)


#—Ö—ç–Ω–¥–ª–µ—Ä –æ—Ç–º–µ–Ω—ã –∏ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@search_vendor_code_router.message(StateFilter('*'), Command('–æ—Ç–º–µ–Ω–∞'))
@search_vendor_code_router.message(StateFilter('*'), F.text.casefold() == '–æ—Ç–º–µ–Ω–∞')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()

    if current_state is None:
        return
    
    await state.clear()
    await message.answer('–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã', reply_markup=start_kbd)

#—Ö—ç–Ω–¥–ª–µ—Ä –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ —â–∞–≥ –Ω–∞–∑–∞–¥
@search_vendor_code_router.message(StateFilter('*'), Command('–Ω–∞–∑–∞–¥'))
@search_vendor_code_router.message(StateFilter('*'), F.text.casefold() == '–Ω–∞–∑–∞–¥')
async def back_step_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()

    if current_state == AddSearchQuery.geo_position:
        await message.answer('–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ –æ—Ç–º–µ–Ω–∞')
        return
    
    previous = None
    for step in AddSearchQuery.__all_states__:
        if step.state == current_state:
            await state.set_state(previous)
            await message.answer(f'–û–∫ –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É \n {AddSearchQuery.texts[previous.state]}')
            return
        previous = step


#–í—Å—Ç–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–∞, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é  
@search_vendor_code_router.message(StateFilter(AddSearchQuery.geo_position), F.text == '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—éüåá')
async def get_geo_position_default(message: types.Message, state: FSMContext):
    dest = await get_xinfo()
    await state.update_data(geo_position=dest)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∞—Ä—Ç–∏–∫—É–ª –∏—Å–∫–æ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞', reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(AddSearchQuery.vendor_code)

#–í—Å—Ç–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–∞, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ —é–∑–µ—Ä–∞    
@search_vendor_code_router.message(StateFilter(AddSearchQuery.geo_position), F.location)
async def get_geo_position_user(message: types.Message, state: FSMContext):
    
    geo_data = {
        'longitude': message.location.longitude,
        'latitude': message.location.latitude,
    }
    
    dest = await get_xinfo(geo_data)

    await state.update_data(geo_position=dest)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∞—Ä—Ç–∏–∫—É–ª –∏—Å–∫–æ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞', reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(AddSearchQuery.vendor_code)


#–ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—Å
@search_vendor_code_router.message(StateFilter(AddSearchQuery.geo_position), F.text == '–í–≤–µ—Å—Ç–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ‚úèÔ∏è')
async def get_address(message: types.Message):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å', reply_markup=types.ReplyKeyboardRemove())
    

#–ø–æ –∞–¥—Ä–µ—Å—É –ø–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ dest –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–±
@search_vendor_code_router.message(StateFilter(AddSearchQuery.geo_position), F.text)
async def get_geo_position_manually(message: types.Message, state: FSMContext):
    address = message.text
    coords = await get_osm(address)
    if coords['status']:
        dest = await get_xinfo(coords)
        await state.update_data(geo_position=dest)
        await message.answer('–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∞—Ä—Ç–∏–∫—É–ª –∏—Å–∫–æ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞', reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(AddSearchQuery.vendor_code)
    else:
        logging.error('The address does not exist')
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–¥—Ä–µ—Å')


#—Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
@search_vendor_code_router.message(StateFilter(AddSearchQuery.geo_position))
async def get_geo_position_error(message: types.Message, state: FSMContext):
    await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ')


#–ª–æ–≤–∏–º –∞—Ä—Ç–∏–∫—É–ª –∏ –≤—Å—Ç–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
@search_vendor_code_router.message(StateFilter(AddSearchQuery.vendor_code), F.text)
async def add_vendor_code(message: types.Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞—Ä—Ç–∏–∫—É–ª–∞
    try:
        if validation_code(message.text) is False:
            raise ValueError
    except Exception as e:
        logging.exception(e)
        await message.answer(f"{message.from_user.first_name}, –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return 
    
    await state.update_data(vendor_code=message.text)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å')
    await state.set_state(AddSearchQuery.search_query)

#—Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞
@search_vendor_code_router.message(StateFilter(AddSearchQuery.vendor_code))
async def add_vendor_code2(message: types.Message, state: FSMContext):
    await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ')

#—Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@search_vendor_code_router.message(StateFilter(AddSearchQuery.search_query), F.text)
async def add_search_query(message: types.Message, state: FSMContext):
    await state.update_data(search_query=message.text)
    await message.answer('–ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ...', reply_markup=types.ReplyKeyboardRemove())
    data = await state.get_data()
    # try:
    response = await get_response(data)

    if response['status']:   
        await message.answer(
            f"–¢–æ–≤–∞—Ä –∞—Ä—Ç.{data['vendor_code']} –ø–æ –∑–∞–ø—Ä–æ—Å—É '{data['search_query']}' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ {str(response['page'])} —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–∞ {str(response['place'])} –º–µ—Å—Ç–µ.", 
            reply_markup=start_kbd
        )
    else:
        await message.answer(
            f"–¢–æ–≤–∞—Ä –∞—Ä—Ç.{data['vendor_code']} –ø–æ –∑–∞–ø—Ä–æ—Å—É '{data['search_query']}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–µ—Ä–≤—ã—Ö {PAGE_LIMIT} —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö", 
            reply_markup=start_kbd
        )
        
    await state.clear()

#—Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
@search_vendor_code_router.message(StateFilter(AddSearchQuery.search_query), F.text)
async def add_search_query2(message: types.Message, state: FSMContext):
    await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ')
